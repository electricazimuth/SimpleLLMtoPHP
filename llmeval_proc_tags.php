<?php
/*
 * Processes the data previously generated by LLM
 */
set_time_limit(0);
require("bootstrapper.inc.php");

//include('templates/header.inc.php');
$stage = 1;

$is_test_run = false;
$last_stage = $stage - 1;
$next_stage = $stage + 1;
$logname = $stage . '.tagextract';
$loginfo = array();


//1202  2332 1182
// l.row_id ASC LIMIT 1,1";
$test_q = "SELECT COUNT(*) as counter FROM sections_topics WHERE error = 0 AND processed = " . $stage ;
$test_rows = $registry->db->getRows($test_q);
$rows_to_do = (int)$test_rows[0]['counter'];
$auto_stop = false;
$num_done = 0;
$total = $rows_to_do;
$limit = ($is_test_run)? 10 : 250;


//get topics for matching
$q = "SELECT topic_id, topic FROM topics";
$topic_rows = $registry->db->getRows($q);


while($rows_to_do > 5 && !$auto_stop){

    //$auto_stop = true;
    Utils::CliProgressBar($num_done, $total);
    

    $time_start = microtime(true);
//row_id 	lyrics 	lyric_id 	section 	processed 	topics 	
    $q = "SELECT * FROM sections_topics p WHERE p.error = 0 AND p.processed = " . $stage . " ORDER BY p.row_id ASC LIMIT " . $limit;
    $rows = $registry->db->getRows($q);

    if( is_array($rows) && count($rows) > 0 ){
        foreach($rows as $row){

            $data = Utils::ProcessTags($row['topics']);

            if( $data['matched'] ){

                if( isset($data['results']) && count( $data['results'] ) > 0){
                //get tag ids and check for any missing tags
                
                    //echo '<pre>';
                    //var_dump( $data['results'] );
                    //echo '</pre><hr />';
                    $ins = array();
                    $topic_rows = CheckDatabaseTopics($topic_rows, $data['results'], $registry->db);
                    foreach($data['results'] as $topc => $score){
                        //get topic id

                        $topic_id = GetTopicId($topc, $topic_rows ); //GetTopicId($topic_name, $topic_rows )
                        $ins[] = '(' . (int)$row['row_id'] . ', ' . (int)$topic_id . ',' . (int)$score . ')';

                    }
                    
                    if( count($ins) ){
                        $q = "INSERT IGNORE INTO sections_to_topics (section_row_id, topic_id, score) VALUES " . implode(',', $ins);
                        if( $is_test_run ){
                            echo '<br />' . $q . '<hr />';
                        }else{
                            $registry->db->sendQuery($q);
                        }
                            
                    }

                }

                $q = "UPDATE sections_topics SET processed = ? WHERE row_id = ?";
                $registry->db->sendQueryP($q, array($next_stage, $row['row_id']), "ii");

                
            }else{
                //mark up as having an issue
                if( $is_test_run ){
                    echo 'error on row ' . $row['pri_key'] . ' didnt match <hr/>' . PHP_EOL;
                    echo $row['topics'] . '<hr/>' . PHP_EOL;
                    echo $row['lyrics'] . '<hr/>' . PHP_EOL;
                }else{

                    $q = "UPDATE sections_topics SET error = 1 WHERE row_id = ?";
                    $registry->db->sendQueryP($q, array($row['row_id']), "i");

                }
            }

        }
    }

    $num_done += count($rows);

    //short circuit the while loop - we only do a single loop in test mode
    if($is_test_run){
        $auto_stop = true;
    }

    $test_rows = $registry->db->getRows($test_q);
    $rows_to_do = (int)$test_rows[0]['counter'];


    $loginfo = array();
    //$loginfo['model'] = $registry->llm->GetModel();
    $loginfo['totaltime'] = microtime(true) - $time_start;
    $loginfo['numrows'] = count($rows);
    if( count($rows) > 0){
        $loginfo['avetime'] = number_format((float)($loginfo['totaltime'] / count($rows)), 2, '.', '');
    }
    $loginfo['todo'] = $rows_to_do;
    $loginfo['lastkey'] = $row['row_id'];
    if(!$is_test_run){
        Utils::DbLog($logname, json_encode($loginfo,JSON_FORCE_OBJECT | JSON_PRETTY_PRINT), $registry->db );
    }
    

}


if($is_test_run){
    echo '<pre>';
    echo json_encode($loginfo,JSON_FORCE_OBJECT | JSON_PRETTY_PRINT);
    echo '</pre>';
}
//include('templates/footer.inc.php');
echo PHP_EOL . 'done' . PHP_EOL;

/*
* if there are new topics add them to the topics table
* $db_topic_rows - from database topic table query, scored_topics - scored topics (topic is key - score is value)
*/
function CheckDatabaseTopics($db_topic_rows, $scored_topics, $db){
    $db_topic_name = array();
    foreach($db_topic_rows as $row){
        $db_topic_name[] = $row['topic'];
    }
    $new_topic_names = array_keys( $scored_topics );
    $diff = array_diff( $new_topic_names, $db_topic_name);
    if( count($diff) > 0 ){
        //new topics
        //echo ' NEW TOPICS ';
        //var_dump( $diff );
        $prepared_questionmarks = implode(',', array_fill(0, count($diff), '(?)'));
        $q = "INSERT INTO topics (topic) VALUES " . $prepared_questionmarks;
        $db->sendQueryP($q, $diff);

        $q = "SELECT topic_id, topic FROM topics";
        return $db->getRows($q);

    }
        
    return $db_topic_rows;
}


function GetTopicId($topic_name, $topic_rows ){
    foreach($topic_rows as $row){
        if( $row['topic'] == $topic_name ){
            return $row['topic_id'];
        }
    }
    return -1;
}
